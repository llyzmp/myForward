// 闭包: 函数和它周围的状态(词法环境)的引用捆绑在一起形成闭包
// 可以再另一个作用域中调用一个函数内部的函数,并访问该函数作用域中的成员
// 核心作用： 把函数内部成员作用域范围延长
// 闭包的本质： 函数在执行的时候会放到一个执行栈上，当函数执行完毕后会从栈上移除，但是堆上的作用域成员因为被引用不能被释放，因此内部函数依然可以访问到外部函数成员

// 1. test1
function makeFn() {
  let msg = "我是最帅的";

  return function() {
    console.log(msg);
  }
}

let res = makeFn();

console.log(res());